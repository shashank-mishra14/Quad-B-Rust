use std::rc::Rc;
use std::cell::RefCell;
use std::cmp::max;
impl Solution {
    pub fn max_depth(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
        if root.is_none() { 
            return 0 
        }
        let mut q: Vec<_> = vec![root.clone()]; 
        let mut depth = 1;
        while q.len() > 0 {
            let mut new_q: Vec<Option<Rc<RefCell<TreeNode>>>> = vec![]; 
            
            //  Traverse through the entire levels
            for node in q.iter() { 
                
                if let Some(node) = node { 
                    
                    let node = node.borrow();
                    
                    if node.left.is_some() { 
                    
                        new_q.push(node.left.clone());
                    } 
                    
                    if node.right.is_some() {
                      
                        new_q.push(node.right.clone());
                    }
                }
            } 
            if new_q.len() > 0 {
                depth += 1;
            }
            q = new_q; // set the new value of q to the new_q
        }
        depth  // return i32 
    }
}
